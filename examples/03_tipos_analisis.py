"""
Ejemplo 03: Tipos de An√°lisis Espec√≠ficos
=========================================

Este ejemplo muestra c√≥mo ejecutar diferentes tipos de an√°lisis:
- Solo an√°lisis est√°tico
- Solo an√°lisis modal
- An√°lisis din√°mico
- An√°lisis completo (todos los tipos)

Caso de uso: Selecci√≥n de an√°lisis seg√∫n objetivos de investigaci√≥n
"""

from src.model_builder import ModelBuilder
from src.analysis_engine import AnalysisEngine

def main():
    """Ejemplo de diferentes tipos de an√°lisis"""
    
    print("=== Ejemplo 03: Tipos de An√°lisis Espec√≠ficos ===")
    
    # Configurar componentes
    builder = ModelBuilder(output_dir="models")
    engine = AnalysisEngine()
    
    # Par√°metros del modelo base
    L_B_ratio = 2.0
    B = 12.0
    nx = 5
    ny = 3
    
    print(f"Modelo base: L/B={L_B_ratio}, B={B}m, ejes={nx}x{ny}")
    
    # === AN√ÅLISIS 1: Solo Est√°tico ===
    print("\n1Ô∏è‚É£ SOLO AN√ÅLISIS EST√ÅTICO")
    print("   Objetivo: Evaluar desplazamientos bajo carga est√°tica")
    
    model_static = builder.create_model(
        L_B_ratio=L_B_ratio, B=B, nx=nx, ny=ny,
        model_name="ejemplo_03_estatico",
        enabled_analyses=['static'],
        analysis_params={
            'static': {
                'steps': 20,           # M√°s pasos para mejor convergencia
                'algorithm': 'Newton', # Algoritmo m√°s robusto
                'tolerance': 1e-8      # Mayor precisi√≥n
            },
            'visualization': {'enabled': False}  # Sin viz para velocidad
        }
    )
    
    print(f"   Modelo creado: {model_static['name']}")
    results_static = engine.analyze_model(model_static['file_path'])
    
    if results_static['static_analysis']['success']:
        static_data = results_static['static_analysis']
        print(f"   ‚úÖ Desplazamiento m√°ximo: {static_data['max_displacement']:.6f} m")
        print(f"   üìç Nodo cr√≠tico: {static_data['max_displacement_node']}")
    
    # === AN√ÅLISIS 2: Solo Modal ===
    print("\n2Ô∏è‚É£ SOLO AN√ÅLISIS MODAL")
    print("   Objetivo: Caracterizar propiedades din√°micas")
    
    model_modal = builder.create_model(
        L_B_ratio=L_B_ratio, B=B, nx=nx, ny=ny,
        model_name="ejemplo_03_modal",
        enabled_analyses=['modal'],
        analysis_params={
            'modal': {
                'num_modes': 12,                # M√°s modos para an√°lisis completo
                'eigen_solver': 'fullGenLapack' # Solver m√°s preciso
            },
            'visualization': {'enabled': False}
        }
    )
    
    print(f"   Modelo creado: {model_modal['name']}")
    results_modal = engine.analyze_model(model_modal['file_path'])
    
    if results_modal['modal_analysis']['success']:
        modal_data = results_modal['modal_analysis']
        print(f"   ‚úÖ Periodo fundamental: {modal_data['fundamental_period']:.4f} s")
        print(f"   üåä Frecuencia fundamental: {modal_data['fundamental_frequency']:.2f} Hz")
        print(f"   üìä Modos calculados: {len(modal_data['periods'])}")
        
        # Mostrar todos los periodos
        print("   üìà Periodos modales:")
        for i, period in enumerate(modal_data['periods'], 1):
            freq = 1.0 / period
            print(f"      Modo {i:2d}: T = {period:.4f} s, f = {freq:.2f} Hz")
    
    # === AN√ÅLISIS 3: Din√°mico (Est√°tico + Din√°mico) ===
    print("\n3Ô∏è‚É£ AN√ÅLISIS DIN√ÅMICO")
    print("   Objetivo: Respuesta en el tiempo")
    
    model_dynamic = builder.create_model(
        L_B_ratio=L_B_ratio, B=B, nx=nx, ny=ny,
        model_name="ejemplo_03_dinamico",
        enabled_analyses=['static', 'dynamic'],
        analysis_params={
            'static': {'steps': 15},
            'dynamic': {
                'dt': 0.01,           # Paso de tiempo
                'num_steps': 1000,    # Duraci√≥n del an√°lisis
                'damping_ratio': 0.05, # Amortiguamiento
                'integrator': 'Newmark',
                'gamma': 0.5,
                'beta': 0.25
            },
            'visualization': {'enabled': False}
        }
    )
    
    print(f"   Modelo creado: {model_dynamic['name']}")
    results_dynamic = engine.analyze_model(model_dynamic['file_path'])
    
    if results_dynamic['static_analysis']['success']:
        print(f"   ‚úÖ An√°lisis est√°tico: OK")
    if results_dynamic['dynamic_analysis']['success']:
        dynamic_data = results_dynamic['dynamic_analysis']
        print(f"   ‚úÖ An√°lisis din√°mico: {dynamic_data['num_steps']} pasos completados")
        print(f"   ‚è±Ô∏è  Duraci√≥n simulada: {dynamic_data['total_time']:.2f} s")
    
    # === AN√ÅLISIS 4: Completo (Todos los tipos) ===
    print("\n4Ô∏è‚É£ AN√ÅLISIS COMPLETO (Static + Modal + Dynamic)")
    print("   Objetivo: Caracterizaci√≥n estructural completa")
    
    model_complete = builder.create_model(
        L_B_ratio=L_B_ratio, B=B, nx=nx, ny=ny,
        model_name="ejemplo_03_completo",
        enabled_analyses=['static', 'modal', 'dynamic'],
        analysis_params={
            'static': {
                'steps': 15,
                'algorithm': 'Newton'
            },
            'modal': {
                'num_modes': 10
            },
            'dynamic': {
                'dt': 0.005,
                'num_steps': 2000,
                'damping_ratio': 0.05
            },
            'visualization': {'enabled': False}  # Sin viz para este ejemplo
        }
    )
    
    print(f"   Modelo creado: {model_complete['name']}")
    results_complete = engine.analyze_model(model_complete['file_path'])
    
    # Resumen de resultados completos
    analysis_status = []
    if 'static_analysis' in results_complete:
        status = "‚úÖ" if results_complete['static_analysis']['success'] else "‚ùå"
        analysis_status.append(f"   {status} Est√°tico")
        
    if 'modal_analysis' in results_complete:
        status = "‚úÖ" if results_complete['modal_analysis']['success'] else "‚ùå"
        analysis_status.append(f"   {status} Modal")
        
    if 'dynamic_analysis' in results_complete:
        status = "‚úÖ" if results_complete['dynamic_analysis']['success'] else "‚ùå"
        analysis_status.append(f"   {status} Din√°mico")
    
    print("\\n".join(analysis_status))
    
    # === RESUMEN COMPARATIVO ===
    print("\n" + "="*60)
    print("üìä RESUMEN COMPARATIVO DE AN√ÅLISIS")
    print("="*60)
    print("Tipo              | Tiempo | Informaci√≥n obtenida")
    print("-" * 60)
    print("Solo Est√°tico     | R√°pido | Desplazamientos, reacciones")
    print("Solo Modal        | Medio  | Periodos, frecuencias, formas modales")
    print("Din√°mico          | Lento  | Respuesta temporal, historia")
    print("Completo          | Muy Lento | Caracterizaci√≥n total")
    print()
    print("üí° RECOMENDACIONES:")
    print("- Dise√±o preliminar: Solo est√°tico")
    print("- An√°lisis s√≠smico: Modal + din√°mico")
    print("- Investigaci√≥n: An√°lisis completo")
    print("- Estudios param√©tricos: Solo est√°tico o modal")

if __name__ == "__main__":
    main()
