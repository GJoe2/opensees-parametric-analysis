"""
Ejemplo 04: Estudio Param√©trico Completo
========================================

Este ejemplo muestra c√≥mo ejecutar estudios param√©tricos para analizar
la influencia de diferentes par√°metros geom√©tricos en el comportamiento estructural.

Caso de uso: Investigaci√≥n param√©trica de edificios de hormig√≥n armado
"""

from src.model_builder import ModelBuilder
from src.analysis_engine import AnalysisEngine
from src.parametric_runner import ParametricRunner
from src.report_generator import ReportGenerator

def main():
    """Ejemplo de estudio param√©trico completo"""
    
    print("=== Ejemplo 04: Estudio Param√©trico Completo ===")
    
    # === CONFIGURACI√ìN DEL ESTUDIO ===
    print("\nüìã Configurando estudio param√©trico...")
    
    # Configurar componentes
    builder = ModelBuilder(output_dir="models")
    engine = AnalysisEngine()
    runner = ParametricRunner(builder, engine)
    
    # === ESTUDIO 1: Sensibilidad a relaci√≥n L/B ===
    print("\n1Ô∏è‚É£ ESTUDIO DE SENSIBILIDAD - Relaci√≥n L/B")
    print("   Objetivo: Analizar influencia de la relaci√≥n largo/ancho")
    
    results_LB = runner.run_full_study(
        L_B_ratios=[1.0, 1.5, 2.0, 2.5],  # Variable de estudio
        B_values=[10.0],                   # Fijo
        nx_values=[4],                     # Fijo  
        ny_values=[3],                     # Fijo
        selection_method="all",
        analysis_distribution={"static": 0.6, "modal": 0.4},  # Mix de an√°lisis
        progress_bar=True
    )
    
    print(f"   ‚úÖ Completado: {len(results_LB)} modelos analizados")
    
    # Mostrar tendencias en relaci√≥n L/B
    print("   üìä Tendencias observadas:")
    for result in results_LB:
        params = result['model_parameters']
        LB = params['L_B_ratio']
        
        if 'static_analysis' in result['results'] and result['results']['static_analysis']['success']:
            disp = result['results']['static_analysis']['max_displacement']
            print(f"      L/B = {LB:.1f}: Despl. m√°x = {disp:.6f} m")
        
        if 'modal_analysis' in result['results'] and result['results']['modal_analysis']['success']:
            period = result['results']['modal_analysis']['fundamental_period']
            print(f"      L/B = {LB:.1f}: Periodo = {period:.4f} s")
    
    # === ESTUDIO 2: Sensibilidad al tama√±o (B) ===
    print("\n2Ô∏è‚É£ ESTUDIO DE SENSIBILIDAD - Tama√±o del edificio (B)")
    print("   Objetivo: Analizar influencia del tama√±o absoluto")
    
    results_B = runner.run_full_study(
        L_B_ratios=[1.5],                  # Fijo
        B_values=[8.0, 12.0, 16.0, 20.0], # Variable de estudio
        nx_values=[4],                     # Fijo
        ny_values=[3],                     # Fijo
        selection_method="all",
        analysis_distribution={"modal": 1.0},  # Solo an√°lisis modal
        progress_bar=True
    )
    
    print(f"   ‚úÖ Completado: {len(results_B)} modelos analizados")
    
    # Mostrar tendencias en tama√±o B
    print("   üìä Tendencias observadas:")
    for result in results_B:
        params = result['model_parameters']
        B = params['B']
        
        if 'modal_analysis' in result['results'] and result['results']['modal_analysis']['success']:
            period = result['results']['modal_analysis']['fundamental_period']
            freq = result['results']['modal_analysis']['fundamental_frequency']
            print(f"      B = {B:.1f}m: T‚ÇÅ = {period:.4f} s, f‚ÇÅ = {freq:.2f} Hz")
    
    # === ESTUDIO 3: Sensibilidad a la discretizaci√≥n ===
    print("\n3Ô∏è‚É£ ESTUDIO DE SENSIBILIDAD - Discretizaci√≥n (nx, ny)")
    print("   Objetivo: Analizar influencia del n√∫mero de ejes")
    
    results_mesh = runner.run_full_study(
        L_B_ratios=[2.0],           # Fijo
        B_values=[15.0],            # Fijo
        nx_values=[3, 4, 5, 6],     # Variable
        ny_values=[2, 3, 4],        # Variable
        selection_method="all",
        analysis_distribution={"static": 1.0},  # Solo an√°lisis est√°tico
        progress_bar=True
    )
    
    print(f"   ‚úÖ Completado: {len(results_mesh)} modelos analizados")
    
    # Mostrar influencia de la discretizaci√≥n
    print("   üìä Tendencias observadas:")
    for result in results_mesh:
        params = result['model_parameters']
        nx = params['nx']
        ny = params['ny']
        
        if 'static_analysis' in result['results'] and result['results']['static_analysis']['success']:
            disp = result['results']['static_analysis']['max_displacement']
            print(f"      {nx}x{ny} ejes: Despl. m√°x = {disp:.6f} m")
    
    # === ESTUDIO 4: Estudio factorial completo (muestra peque√±a) ===
    print("\n4Ô∏è‚É£ ESTUDIO FACTORIAL - Muestra representativa")
    print("   Objetivo: Analizar interacciones entre m√∫ltiples par√°metros")
    
    results_factorial = runner.run_full_study(
        L_B_ratios=[1.5, 2.0],      # 2 niveles
        B_values=[10.0, 15.0],      # 2 niveles
        nx_values=[3, 4],           # 2 niveles
        ny_values=[3, 4],           # 2 niveles
        selection_method="all",      # 2√ó2√ó2√ó2 = 16 combinaciones
        analysis_distribution={"static": 0.5, "modal": 0.5},
        progress_bar=True
    )
    
    print(f"   ‚úÖ Completado: {len(results_factorial)} modelos analizados")
    
    # === AN√ÅLISIS DE RESULTADOS AGREGADOS ===
    print("\n" + "="*60)
    print("üìä AN√ÅLISIS AGREGADO DE TODOS LOS ESTUDIOS")
    print("="*60)
    
    # Combinar todos los resultados
    all_results = results_LB + results_B + results_mesh + results_factorial
    
    # Estad√≠sticas generales
    total_models = len(all_results)
    successful_static = sum(1 for r in all_results 
                           if 'static_analysis' in r['results'] 
                           and r['results']['static_analysis']['success'])
    successful_modal = sum(1 for r in all_results 
                          if 'modal_analysis' in r['results'] 
                          and r['results']['modal_analysis']['success'])
    
    print(f"üìà Modelos totales analizados: {total_models}")
    print(f"‚úÖ An√°lisis est√°ticos exitosos: {successful_static}")
    print(f"üåä An√°lisis modales exitosos: {successful_modal}")
    
    # Rangos de resultados
    if successful_static > 0:
        displacements = [r['results']['static_analysis']['max_displacement'] 
                        for r in all_results 
                        if 'static_analysis' in r['results'] 
                        and r['results']['static_analysis']['success']]
        
        print(f"üìè Rango de desplazamientos:")
        print(f"   M√≠nimo: {min(displacements):.6f} m")
        print(f"   M√°ximo: {max(displacements):.6f} m")
        print(f"   Promedio: {sum(displacements)/len(displacements):.6f} m")
    
    if successful_modal > 0:
        periods = [r['results']['modal_analysis']['fundamental_period'] 
                  for r in all_results 
                  if 'modal_analysis' in r['results'] 
                  and r['results']['modal_analysis']['success']]
        
        print(f"‚è±Ô∏è  Rango de periodos fundamentales:")
        print(f"   M√≠nimo: {min(periods):.4f} s")
        print(f"   M√°ximo: {max(periods):.4f} s")
        print(f"   Promedio: {sum(periods)/len(periods):.4f} s")
    
    # === GENERACI√ìN DE REPORTES (OPCIONAL) ===
    print("\nüìã Generando reporte consolidado...")
    
    try:
        reporter = ReportGenerator(results_dir="results", reports_dir="reports")
        
        # Generar reporte HTML con todos los resultados
        report_path = reporter.generate_comprehensive_report(
            all_results, 
            report_name="estudio_parametrico_ejemplo_04"
        )
        print(f"üìÑ Reporte generado: {report_path}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  No se pudo generar reporte autom√°tico: {e}")
        print("   Los resultados est√°n disponibles en archivos JSON individuales")
    
    # === CONCLUSIONES ===
    print("\n" + "="*60)
    print("üéØ CONCLUSIONES DEL ESTUDIO PARAM√âTRICO")
    print("="*60)
    print("1. La relaci√≥n L/B tiene impacto significativo en desplazamientos")
    print("2. El tama√±o absoluto (B) influye principalmente en periodos")
    print("3. La discretizaci√≥n afecta la precisi√≥n de resultados")
    print("4. Las interacciones entre par√°metros son detectables")
    print()
    print("üí° RECOMENDACIONES PARA ESTUDIOS FUTUROS:")
    print("- Usar m√°s niveles para curvas de tendencia")
    print("- Incluir an√°lisis din√°mico para sismos")
    print("- Considerar diferentes condiciones de carga")
    print("- Automatizar generaci√≥n de reportes")

if __name__ == "__main__":
    main()
